# Ensure SELinux is enabled and enforcing

# Linux distributions in the Red Hat family, such as RHEL and Fedora, implement a mandatory access control (MAC) security solution known as SELinux (Security Enhanced Linux). SELinux is one of the best ways to improve your system's security by ensuring that processes only have access to specific resources, such as certain files or designated network ports.

# I won't cover SELinux in detail here. It's a large topic, so I encourage you to learn more about it. For more information, consult the SELinux documentation.

# To enable SELinux and set it to enforcing mode to allow active system protection, use the ansible.posix.selinux module:

- name: Ensure SELinux is enabled and enforcing
  ansible.posix.selinux:
    policy: targeted
    state: enforcing
  register: selinux_status

# As with the firewall, SELinux should be enabled by default with RHEL and Fedora, but this is a good check and action in case it's not. When you change the SELinux status, a reboot is required. In this case, the selinux module returns the variable reboot_required set to true. Check this value with the debug module and use a changed_when condition to notify a handler to reboot the machine at the end:

- name: Verify if reboot needed
  ansible.builtin.debug:
    msg: "Reboot needed: {{ selinux_status.reboot_required }}"
  changed_when: "{{ selinux_status.reboot_required | bool }}"
  notify: reboot_host

# Then, at the end of your playbook, define the reboot_host handle using the ansible.builtin.reboot module to restart the machine:

handlers:
- name: reboot_host
  ansible.builtin.reboot:
    reboot_timeout: 360

# Note that if you enable SELinux for an existing server with many files, the system relabels them when the machine restarts. This process can take a long time, so plan changes accordingly. The best option is to enable SELinux when deploying a new server to ensure it benefits from this protection from the start.